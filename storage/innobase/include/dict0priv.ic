/*****************************************************************************

Copyright (c) 2010, 2021, Oracle and/or its affiliates.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/dict0priv.ic
 Data dictionary system private include file

 Created  Wed 13 Oct 2010 16:10:14 EST Sunny Bains
 ***********************************************************************/

#include "dict0dict.h"
#include "dict0load.h"
#include "dict0priv.h"

// 普通用户表加载过程
inline dict_table_t *dict_table_get_low(const char *table_name,
                                        const std::string *prev_table) {
  dict_table_t *table;

  ut_ad(table_name);
  ut_ad(dict_sys_mutex_own());

  // 先从表缓存中找这个表
  table = dict_table_check_if_in_cache_low(table_name);

  /* 如果找到了,已经损坏,则要在日志中报错,并提示可通过 innodb_force_load_corrupted 参数忽略异常
   * 但是需要尽量避免,因为只有查找问题及一些特殊场景才会使用这个参数
  */
  if (table && table->is_corrupted()) {
    ib::error error(ER_IB_MSG_1229);
    error << "Table " << table->name << "is corrupted";
    if (srv_load_corrupted) {
      error << ", but innodb_force_load_corrupted is set";
    } else {
      return (nullptr);
    }
  }

  // 如果表缓存中没有找到,就从数据字典表中寻找,需要查找系统表
  if (table == nullptr) {
    table = dict_load_table(table_name, true, DICT_ERR_IGNORE_NONE, prev_table);
  }

  ut_ad(!table || table->cached);

  // 最后不管有没有找到,都返回这个对象,有可能是 NULL 值
  return (table);
}

/** Checks if a table is in the dictionary cache.
 @return table, NULL if not found */
// 从字典表缓存中查看表是否存在,返回 dict_table_t
static inline dict_table_t *dict_table_check_if_in_cache_low(
    const char *table_name) /*!< in: table name */
{
  dict_table_t *table;
  ulint table_fold;

  DBUG_TRACE;
  DBUG_PRINT("dict_table_check_if_in_cache_low", ("table: '%s'", table_name));

  ut_ad(table_name);
  ut_ad(dict_sys_mutex_own());

  /* Look for the table name in the hash table */
  table_fold = ut_fold_string(table_name);

  HASH_SEARCH(name_hash, dict_sys->table_hash, table_fold, dict_table_t *,
              table, ut_ad(table->cached),
              !strcmp(table->name.m_name, table_name));
  return table;
}
